{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","data","item","weather","temperature","icon","pressure","speed","placeName","apiToken","id","getJSON","uri","options","window","fetch","then","res","json","description","main","temp","wind","method","params","this","setState","event","index","target","dataset","optionIndex","place","getData","name","console","log","Card","class","CardHeader","width","title","CardActions","handleUpdate","bind","CardContent","React","Component","SelectorView","Autocomplete","getOptionLabel","option","renderInput","TextField","label","variant","style","fullWidth","onChange","ListView","formatTemperature","formatPressure","formatSpeed","path","image","Avatar","src","alt","WbSunny","List","ListItem","ListItemIcon","ListItemText","primary","ShowChart","CloudQueue","LabelImportant","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecf2a5aa.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Avatar,\n  ListItemIcon\n} from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport {\n  ShowChart,\n  WbSunny,\n  CloudQueue,\n  LabelImportant\n} from '@material-ui/icons'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: {},\n      item: {\n        weather: '',\n        temperature: '',\n        icon: '',\n        pressure: '',\n        speed: ''\n      },\n      placeName: ''\n    }\n    this.apiToken = 'e121d45d62a927953115196e6a945df7'\n  }\n\n  async getData (id) {\n    const getJSON = (uri, options) =>\n      window\n        .fetch(uri, options)\n        .then(res => res.json())\n        .then(json => ({\n          weather: json.weather[0].description,\n          icon: json.weather[0].icon,\n          temperature: json.main.temp,\n          pressure: json.main.pressure,\n          speed: json.wind.speed\n        }))\n\n    const options = { method: 'get' }\n    const uri = 'http://api.openweathermap.org/data/2.5/weather?'\n    const params = `&appid=${this.apiToken}&id=${id}`\n    const data = await getJSON(uri + params, options)\n    this.setState({ item: data })\n  }\n\n  handleUpdate (event) {\n    const index = event.target.dataset.optionIndex\n    const place = this.state.data[index]\n    this.getData(place.id)\n    this.setState({ placeName: place.name })\n  }\n\n  async componentDidMount () {\n    this.setState({\n      data: [\n        { name: '那覇', id: 1856035 },\n        { name: '名護', id: 1856068 },\n        { name: '沖縄', id: 1894616 },\n        { name: '恩納', id: 1854037 },\n        { name: '北谷', id: 1864652 },\n        { name: '今帰仁', id: 1855713 },\n        { name: '座間味', id: 1848002 },\n        { name: '西', id: 1855357 },\n        { name: '本部', id: 1894388 },\n        { name: '伊是名', id: 1861124 }\n      ]\n    })\n  }\n\n  render () {\n    console.log(this.state)\n    return (\n      <Card>\n        <div class='title'>\n          <CardHeader width='auto' />\n          <CardHeader title='都市天気' />\n        </div>\n        <CardActions>\n          <SelectorView\n            data={this.state.data}\n            handleUpdate={this.handleUpdate.bind(this)}\n          />\n        </CardActions>\n        <CardContent>\n          <ListView item={this.state.item} />\n        </CardContent>\n      </Card>\n    )\n  }\n}\n\nconst SelectorView = props => (\n  <Autocomplete\n    options={props.data}\n    getOptionLabel={option => option.name}\n    renderInput={params => (\n      <TextField\n        {...params}\n        label='場所を選択してください。'\n        variant='outlined'\n        style={{ width: 500 }}\n        fullWidth\n      />\n    )}\n    onChange={props.handleUpdate}\n  />\n)\n\nconst ListView = props => {\n  const { weather, icon, temperature, pressure, speed } = props.item\n  const formatTemperature = temperature ? `${temperature}℃ ` : ''\n  const formatPressure = pressure ? `${pressure}hap` : ''\n  const formatSpeed = speed ? `${speed}m/s` : ''\n  const path = `http://openweathermap.org/img/wn/${icon}.png`\n  const image = icon ? <Avatar src={path} alt={weather} /> : <WbSunny />\n  console.log('props', props)\n  return (\n    <List class='b'>\n      <ListItem>\n        <ListItemIcon>{image}</ListItemIcon>\n        <ListItemText primary={weather} />\n      </ListItem>\n      <ListItem>\n        <ListItemIcon>\n          <ShowChart />\n        </ListItemIcon>\n        <ListItemText primary={formatTemperature} />\n      </ListItem>\n      <ListItem>\n        <ListItemIcon>\n          <CloudQueue />\n        </ListItemIcon>\n        <ListItemText primary={formatPressure} />\n      </ListItem>\n      <ListItem>\n        <ListItemIcon>\n          <LabelImportant />\n        </ListItemIcon>\n        <ListItemText primary={formatSpeed} />\n      </ListItem>\n    </List>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}